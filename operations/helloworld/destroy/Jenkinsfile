#!groovy
import groovy.json.JsonOutput
pipeline {
    agent any
    stages {
        stage('Retrieve kubeconfig') {
            steps {
                withProxyEnv() {
                    sh '''#!/bin/bash -x
                    aws eks update-kubeconfig --name ${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}-ops --region ${AWS_REGION}
                    '''
                }
            }
        }
        stage('Delete Deployment') {
            steps {
                withProxyEnv() {
                    sh 'kubectl delete deployment helloworld-demo ||true'
                }
            }
        }
        stage('Delete Service') {
            steps {
                withProxyEnv() {
                    sh 'kubectl delete service helloworld-demo ||true'
                }
            }
        }
    }
}
void withProxyEnv(List envVars = [],  def body) {
    List proxies =[]
    List envVaraibles = ['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']
    withAWSParameterStore(credentialsId: '', namePrefixes: '', naming: 'relative', path: "/$PRODUCT_DOMAIN_NAME/$ENVIRONMENT_TYPE", recursive: true, regionName: "$AWS_REGION") {
        script {
            if (env.PROXY_HTTP) {
                proxies << "http_proxy=$PROXY_HTTP"
            }
            if (env.PROXY_HTTPs) {
                proxies << "https_proxy=$PROXY_HTTPS"
            }
            if (env.PROXY_NO) {
                proxies << "no_proxy=$PROXY_NO"
            }
            envVaraibles.addAll(proxies)
        }
    }
    envVaraibles.addAll(envVars)

    withEnv(envVaraibles) {
        body.call()
    }
}