#!groovy
import groovy.json.JsonOutput
def serviceConfig = '''
apiVersion: v1
kind: Service
metadata:
  name: helloworld-demo
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/
  labels:
    app: helloworld-demo
    name: helloworld-demo
spec:
  type: LoadBalancer
  ports:
  - port: 8081
  selector:
    app: helloworld-demo
'''
def deploymentConfig = '''
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld-demo
  labels:
    app: helloworld-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: helloworld-demo
  template:
    metadata:
      labels:
        app: helloworld-demo
    spec:
      containers:
      - name: helloworld-demo
        image: 111860764813.dkr.ecr.us-east-1.amazonaws.com/helloworld:latest
        imagePullPolicy: "Always"
        resources:
          limits:
            cpu: 400m
            memory: 200Mi
          requests:
            cpu: 20m
            memory: 100M
        ports:
        - containerPort: 8081
'''
pipeline {
    agent any
    stages {
        stage('Retrieve kubeconfig') {
            steps {
                withProxyEnv() {
                    sh '''#!/bin/bash -x
                    aws eks update-kubeconfig --name ${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}-ops --region ${AWS_REGION}
                    '''
                }
            }
        }
        stage('Create Service') {
            steps {
                withProxyEnv() {
                    writeFile file: 'demo_service.yaml', text: serviceConfig
                    sh 'kubectl create -f demo_service.yaml ||true'
                }
            }
        }
        stage('Create Deployment') {
            steps {
                withProxyEnv() {
                    writeFile file: 'demo_deployment.yaml', text: deploymentConfig
                    sh 'kubectl create -f demo_deployment.yaml ||true'
                }
            }
        }
    }
}
void withProxyEnv(List envVars = [],  def body) {
    List proxies =[]
    List envVaraibles = ['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']
    withAWSParameterStore(credentialsId: '', namePrefixes: '', naming: 'relative', path: "/$PRODUCT_DOMAIN_NAME/$ENVIRONMENT_TYPE", recursive: true, regionName: "$AWS_REGION") {
        script {
            if (env.PROXY_HTTP) {
                proxies << "http_proxy=$PROXY_HTTP"
            }
            if (env.PROXY_HTTPs) {
                proxies << "https_proxy=$PROXY_HTTPS"
            }
            if (env.PROXY_NO) {
                proxies << "no_proxy=$PROXY_NO"
            }
            envVaraibles.addAll(proxies)
        }
    }
    envVaraibles.addAll(envVars)

    withEnv(envVaraibles) {
        body.call()
    }
}